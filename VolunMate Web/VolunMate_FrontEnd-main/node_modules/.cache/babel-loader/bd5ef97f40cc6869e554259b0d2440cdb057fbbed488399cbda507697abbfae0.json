{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Suwaathmi Ravindran\\\\OneDrive\\\\Desktop\\\\VolunMate_FrontEnd-main\\\\src\\\\Components\\\\UserEventScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./UserEventsScreen.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserEventsScreen = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5150/api/Event\");\n        const data = await response.json();\n        if (!response.ok) throw new Error(data.message || \"Failed to load events\");\n        setEvents(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchEvents();\n  }, []);\n  const handleRegister = async eventId => {\n    try {\n      const volunteerId = localStorage.getItem(\"userId\");\n      if (!volunteerId) {\n        alert(\"Please log in to register for events.\");\n        navigate(\"/login\");\n        return;\n      }\n      const response = await fetch(\"http://localhost:5150/api/Event/Register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          eventId,\n          volunteerId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message || \"Registration failed\");\n      setSuccess(\"Successfully registered for the event!\");\n      setTimeout(() => setSuccess(\"\"), 3000);\n    } catch (err) {\n      setError(err.message);\n      setTimeout(() => setError(\"\"), 3000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"events-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upcoming Events\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading\",\n      children: \"Loading events...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"events-grid\",\n      children: [events.length === 0 && !loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No upcoming events.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 44\n      }, this) : null, events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: event.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 16\n          }, this), \" \", new Date(event.date).toLocaleDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: event.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"register-btn\",\n          onClick: () => handleRegister(event.id),\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(UserEventsScreen, \"I1V5J3t5p3tNN0A++3Zur8F7vto=\", false, function () {\n  return [useNavigate];\n});\n_c = UserEventsScreen;\nexport default UserEventsScreen;\nvar _c;\n$RefreshReg$(_c, \"UserEventsScreen\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","UserEventsScreen","_s","events","setEvents","loading","setLoading","error","setError","success","setSuccess","navigate","fetchEvents","response","fetch","data","json","ok","Error","message","err","handleRegister","eventId","volunteerId","localStorage","getItem","alert","method","headers","body","JSON","stringify","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","event","title","Date","date","toLocaleDateString","description","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/Suwaathmi Ravindran/OneDrive/Desktop/VolunMate_FrontEnd-main/src/Components/UserEventScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./UserEventsScreen.css\"; \n\nconst UserEventsScreen = () => {\n  const [events, setEvents] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const navigate = useNavigate();\n\n  \n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5150/api/Event\");\n        const data = await response.json();\n        if (!response.ok) throw new Error(data.message || \"Failed to load events\");\n        setEvents(data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchEvents();\n  }, []);\n\n  \n  const handleRegister = async (eventId) => {\n    try {\n      const volunteerId = localStorage.getItem(\"userId\");\n      if (!volunteerId) {\n        alert(\"Please log in to register for events.\");\n        navigate(\"/login\");\n        return;\n      }\n\n      const response = await fetch(\"http://localhost:5150/api/Event/Register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ eventId, volunteerId }),\n      });\n\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message || \"Registration failed\");\n\n      setSuccess(\"Successfully registered for the event!\");\n      setTimeout(() => setSuccess(\"\"), 3000);\n    } catch (err) {\n      setError(err.message);\n      setTimeout(() => setError(\"\"), 3000);\n    }\n  };\n\n  return (\n    <div className=\"events-container\">\n      <h2>Upcoming Events</h2>\n\n      {loading && <p className=\"loading\">Loading events...</p>}\n      {error && <p className=\"error\">{error}</p>}\n      {success && <p className=\"success\">{success}</p>}\n\n      <div className=\"events-grid\">\n        {events.length === 0 && !loading ? <p>No upcoming events.</p> : null}\n\n        {events.map((event) => (\n          <div key={event.id} className=\"event-card\">\n            <h3>{event.title}</h3>\n            <p><strong>Date:</strong> {new Date(event.date).toLocaleDateString()}</p>\n            <p>{event.description}</p>\n            <button className=\"register-btn\" onClick={() => handleRegister(event.id)}>\n              Register\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default UserEventsScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}